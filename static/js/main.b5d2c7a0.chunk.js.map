{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","containers/ErrorBoundry.js","constants.js","containers/App.js","actions.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","className","alt","src","this","props","id","name","email","React","Component","Cardlist","robots","map","user","Searchbox","type","placeholder","onChange","searchChange","Scroll","style","overflow","children","ErrorBoundry","state","hasError","setState","CHANGE_SEARCH_FIELD","App","fetch","then","response","json","users","searchField","onSearchChange","filterRobots","filter","robot","toLowerCase","includes","length","connect","dispatch","event","text","target","value","payload","Boolean","window","location","hostname","match","initialState","store","createStore","action","Object","assign","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,E,4JAXX,WACI,OACI,sBAAKC,UAAU,sCAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BC,KAAKC,MAAMC,GAArC,cACpB,6BAAKF,KAAKC,MAAME,OAChB,4BAAIH,KAAKC,MAAMG,e,GANZC,IAAMC,WCsBVC,E,4JApBX,WACI,OACI,cAAC,WAAD,UAEQP,KAAKC,MAAMO,OAAOC,KAAI,SAAAC,GAClB,OAAQ,cAAC,EAAD,CAEJR,GAAIQ,EAAKR,GACTC,KAAMO,EAAKP,KACXC,MAAOM,EAAKN,OAHPM,EAAKR,a,GAPfG,IAAMC,WCadK,E,4JAbX,WACI,OACI,qBAAKd,UAAU,MAAf,SACA,uBAAOA,UAAU,mCACjBe,KAAK,SACLC,YAAY,gBACZC,SAAUd,KAAKC,MAAMc,qB,GAPTT,aCQTU,EARA,SAACf,GACZ,OACA,qBAAKgB,MAAO,CAAEC,SAAU,UAAxB,SACCjB,EAAMkB,YCiBIC,E,kDAnBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAU,GAHJ,E,qDAOd,WACItB,KAAKuB,SAAS,CAAED,UAAU,M,oBAG9B,WACI,OAAOtB,KAAKqB,MAAMC,SACd,gDAEAtB,KAAKC,MAAMkB,a,GAhBIb,aCFdkB,EAAsB,sB,OCkB7BC,E,kDACF,aAAe,IAAD,8BACV,gBACKJ,MAAQ,CACTb,OAAQ,IAHF,E,qDAMd,WAAqB,IAAD,OAChBkB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEf,OAAQsB,S,oBAE/C,WACI,IAAQtB,EAAWR,KAAKqB,MAAhBb,OACR,EAAuCR,KAAKC,MAApC8B,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,eACfC,EAAezB,EAAO0B,QAAO,SAAAC,GAC/B,OAAOA,EAAMhC,KAAKiC,cAAcC,SAASN,EAAYK,kBAGzD,OAAQ5B,EAAO8B,OAIP,sBAAKzC,UAAU,KAAf,UACI,8CACA,cAAC,EAAD,CAAWkB,aAAciB,IACzB,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUxB,OAAQyB,WARlC,oD,GApBM3B,aAqCHiC,eA/CS,SAAAlB,GACpB,MAAQ,CACJU,YAAaV,EAAMU,gBAIA,SAAAS,GACvB,MAAO,CAAER,eAAgB,SAACS,GAAD,OAAWD,GCbTE,EDaiCD,EAAME,OAAOC,MCbpC,CACrChC,KAAMY,EACNqB,QAASH,KAFiB,IAACA,MDqDhBH,CAA6Cd,GE3CxCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YChBAC,G,MAAe,CACjBpB,YAAa,KCOXqB,EAAQC,aDJc,WAAmC,IAAlChC,EAAiC,uDAA3B8B,EAAcG,EAAa,uDAAN,GACpD,OAAOA,EAAO1C,MACV,KAAKY,EACD,OAAO+B,OAAOC,OAAO,GAAInC,EAAO,CAAEU,YAAauB,EAAOT,UAE1D,QACI,OAAOxB,MCAnBoC,IAASC,OAEP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,EAAD,MAGJO,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b5d2c7a0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Card extends React.Component{\r\n    render() {\r\n        return(\r\n            <div className='bg-light-green dib br3 pa3 ma2 grow'>\r\n                <img alt='robot' src={`https://robohash.org/${this.props.id}?100x100`}/> \r\n                <h2>{this.props.name}</h2>\r\n                <p>{this.props.email}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React, { Fragment } from 'react';\r\nimport Card from './Card';\r\n\r\nclass Cardlist extends React.Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                {\r\n                    this.props.robots.map(user => {\r\n                        return (<Card\r\n                            key={user.id}\r\n                            id={user.id}\r\n                            name={user.name}\r\n                            email={user.email}\r\n                        />)\r\n                    })\r\n                }\r\n\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Cardlist;","import React, { Component } from 'react';\r\n\r\nclass Searchbox extends Component{\r\n    render() {\r\n        return (\r\n            <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots'\r\n            onChange={this.props.searchChange}\r\n            />\r\n            </div>\r\n        );\r\n        }\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return( \r\n    <div style={{ overflow: 'scroll' }}>\r\n    {props.children}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ?\r\n            <h1>Error detected</h1>\r\n            :\r\n            this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","import React, { Component } from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\nimport { setSearchField } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return  {\r\n        searchField: state.searchField\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return { onSearchChange: (event) => dispatch(setSearchField(event.target.value)) }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }));\r\n    }\r\n    render() {\r\n        const { robots } = this.state;\r\n        const { searchField, onSearchChange} = this.props;\r\n        const filterRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        }\r\n        )\r\n        return !robots.length ?\r\n            <h1>Loading . . . </h1>\r\n            :\r\n            (\r\n                <div className='tc'>\r\n                    <h1>Robofriendsx</h1>\r\n                    <Searchbox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <Cardlist robots={filterRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n            ;\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import{ CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import{ CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nconst initialState = {\r\n    searchField: ''    \r\n}\r\n\r\nexport const searchRobots = (state=initialState, action={}) =>{\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload } )\r\n            // return {...state, searchField: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport 'tachyons';\nimport { searchRobots } from './reducers';\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}